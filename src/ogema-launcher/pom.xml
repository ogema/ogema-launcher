<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.ogema.launcher</groupId>
    <artifactId>ogema-launcher</artifactId>
    <version>1.3.1</version>

    <properties>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-dependency-plugin.version>3.1.1</maven-dependency-plugin.version>
        <maven-find-plugin.version>0.2.5</maven-find-plugin.version>
        <maven-jar-plugin.version>3.2.0</maven-jar-plugin.version>
        <maven-javadoc-plugin.version>3.1.1</maven-javadoc-plugin.version>
        <maven-assembly-plugin.version>3.2.0</maven-assembly-plugin.version>
        <maven-release-plugin.version>2.5.3</maven-release-plugin.version>
        <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
        <aether.version>1.1.0</aether.version>
        <maven.version>3.6.3</maven.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <year>2020</year>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
            <version>6.0.0</version>
        </dependency>

        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-embedder</artifactId>
            <version>${maven.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.4</version>
        </dependency>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-utils</artifactId>
            <version>3.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.aether</groupId>
            <artifactId>aether-api</artifactId>
            <version>${aether.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.aether</groupId>
            <artifactId>aether-util</artifactId>
            <version>${aether.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.aether</groupId>
            <artifactId>aether-impl</artifactId>
            <version>${aether.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.aether</groupId>
            <artifactId>aether-connector-basic</artifactId>
            <version>${aether.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.aether</groupId>
            <artifactId>aether-transport-file</artifactId>
            <version>${aether.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.aether</groupId>
            <artifactId>aether-transport-http</artifactId>
            <version>${aether.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-aether-provider</artifactId>
            <version>3.3.9</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-settings</artifactId>
            <version>${maven.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-settings-builder</artifactId>
            <version>${maven.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>1.20</version>
        </dependency>
        <dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
    </dependencies>
    
    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>
            <!-- Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
            <!-- Jar Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <configuration>
                    <archive>
                        <manifestEntries>
                            <Dependencies />
                        </manifestEntries>
                        <manifest>
                            <mainClass>org.ogema.launcher.OgemaLauncher</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <addDefaultImplementationEntries>
                                true
                            </addDefaultImplementationEntries>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>install-to-build-directory</id>
                        <phase>install</phase>
                        <inherited>false</inherited>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Find Plugin -->
            <plugin>
                <groupId>com.github.goldin</groupId>
                <artifactId>find-maven-plugin</artifactId>
                <version>${maven-find-plugin.version}</version>
                <configuration>
                    <failIfNotFound>false</failIfNotFound>
                </configuration>
                <executions>
                    <execution>
                        <id>find-notice-file</id>
                        <goals>
                            <goal>find</goal>
                        </goals>
                        <!-- don't execute this plugin -> need to be invoked explicitly: mvn 
                        find:find -->
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>find-formatter-file</id>
                        <goals>
                            <goal>find</goal>
                        </goals>
                        <!-- don't execute this plugin -> need to be invoked explicitly: mvn 
                        find:find -->
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <!--License Plugin -->
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>2.11</version>
                <configuration>
                    <header>${license.header}</header>
                    <failIfMissing>false</failIfMissing>
                    <properties>
                        <year>${year}</year>
                    </properties>
                    <keywords> <!-- existing license headers contain all of these keywords -->
                        <keyword>Copyright</keyword>
                        <keyword>License</keyword>
                    </keywords>
                    <includes>
                        <include>src/**</include>
                        <include>web/**</include>
                    </includes>
                    <excludes>
                        <exclude>licence/**</exclude>
                        <exclude>target/**</exclude>
                        <exclude>**/*.txt</exclude>
                        <exclude>**/data/**</exclude>
                        <exclude>**/MANIFEST.MF</exclude>
                        <exclude>**/.project</exclude>
                        <exclude>**/.settings</exclude>
                        <exclude>**/.classpath</exclude>
                        <exclude>**/*.log</exclude>
                        <exclude>**/jquery*.js</exclude>
                        <exclude>**/*.js</exclude>
                        <exclude>**/*.css</exclude>
                        <exclude>**/*.psd</exclude>
                        <exclude>**/*.mp4</exclude>
                        <exclude>**/*.csv</exclude>
                        <exclude>**/*.svg</exclude>
                        <exclude>**/*.ini</exclude>
                        <exclude>**/*.properties</exclude>
                        <exclude>**/*.uml</exclude>
                        <exclude>**/*.umlcd</exclude>
                        <exclude>**/*.tld</exclude>
                        <exclude>**/*.perm</exclude>
                        <exclude>**/*.json</exclude>
                        <exclude>**/config/bundles/**</exclude>
                        <exclude>**/config/ssl/**</exclude>
                    </excludes>
                    <useDefaultExcludes>true</useDefaultExcludes>
                    <strictCheck>true</strictCheck>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>format</goal>
                        </goals>
                        <!-- don't execute this plugin -> need to be invoked explicitly: mvn 
                        license:[goal] [goal] := check, format or remove it is recommended to use 
                        the predefined profile: mvn -Plicense -->
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <!--
                Release Plugin 
                usage: mvn release:prepare 
                         mvn release:perform
                alternatively (with dryRun):
                        mvn release:prepare -DdryRun=true
                        mvn release:clean 
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>${maven-release-plugin.version}</version>
                <configuration>
                    <preparationGoals>clean install</preparationGoals>
                    <goals>deploy</goals>
                    <releaseProfiles>generate-sources-and-javadocs</releaseProfiles>
                    <tagBase>
                        https://www.ogema-source.net/svn/svnrep-ogema-launcher/tags
                    </tagBase>
                </configuration>
            </plugin>
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <minimizeJar>true</minimizeJar>
                            <filters>
                                <!-- aether needs slf4j or commons-logging - 
                                we do not want slf4j here because it produces warnings at startup -->
                                <!-- 
                                <filter>
                                    <artifact>org.slf4j:*</artifact>
                                    <excludes>
                                        <exclude>**</exclude>
                                    </excludes>
                                </filter>
                                -->
                                <filter>
                                    <artifact>commons-logging:commons-logging</artifact>
                                    <includes>
                                        <include>**</include>
                                    </includes>
                                </filter>
                                <filter>
                                    <!-- must be included completely for equinox compatibility (sealed packages) -->
                                    <artifact>org.osgi:org.osgi.core</artifact>
                                    <includes>
                                        <include>**</include>
                                    </includes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
        </plugins>

        <pluginManagement>
            <plugins>
                <!-- Source Plugin -->
                <!-- usage: mvn -Pgenerate-sources-and-javadocs deploy -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven-source-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- Javadoc Plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>attach-javadocs</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!--This plugin's configuration is used to store Eclipse m2e settings 
                only. It has no influence on the Maven build itself. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-dependency-plugin</artifactId>
                                        <versionRange>[1.0,)</versionRange>
                                        <goals>
                                            <goal>copy-dependencies</goal>
                                            <goal>unpack</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute />
                                    </action>
                                </pluginExecution>
                                <!-- find-maven-plugin won't be executed from eclipse-mvn build -> 
                                start from console explicitly if needed -->
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>com.github.goldin</groupId>
                                        <artifactId>find-maven-plugin</artifactId>
                                        <versionRange>[0.1,)</versionRange>
                                        <goals>
                                            <goal>find</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                                <!-- maven-license-plugin won't be executed from eclipse-mvn build 
                                -> start from console explicitly if needed: mvn find:find license:format 
                                OR mvn license:format -Dlicense.header=path/to/header.txt -->
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>com.mycila.maven-license-plugin</groupId>
                                        <artifactId>maven-license-plugin</artifactId>
                                        <versionRange>[1.0,)</versionRange>
                                        <goals>
                                            <goal>check</goal>
                                            <goal>format</goal>
                                            <goal>remove</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <!-- Use this profile to generate license header -> usage: mvn -Plicense -->
        <profile>
            <id>license</id>
            <build>
                <defaultGoal>validate</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>com.github.goldin</groupId>
                        <artifactId>find-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>find-notice-file</id>
                                <configuration>
                                    <propertyName>license.header</propertyName>
                                    <file>licence/header.txt</file>
                                </configuration>
                                <goals>
                                    <goal>find</goal>
                                </goals>
                                <phase>validate</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>com.mycila</groupId>
                        <artifactId>license-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>format</goal>
                                </goals>
                                <!-- don't execute this plugin -> need to be invoked explicitly: 
                                mvn license:[goal] [goal] := check, format or remove -->
                                <phase>validate</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Use this profile to format src files -> usage: mvn -Pformat -->
        <profile>
            <id>format</id>
            <build>
                <defaultGoal>validate</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>com.github.goldin</groupId>
                        <artifactId>find-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>find-formatter-file</id>
                                <configuration>
                                    <propertyName>format.file</propertyName>
                                    <file>eclipse-formatter/ogema-eclipse-formatter.xml</file>
                                </configuration>
                                <goals>
                                    <goal>find</goal>
                                </goals>
                                <phase>validate</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>com.googlecode.maven-java-formatter-plugin</groupId>
                        <artifactId>maven-java-formatter-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Use this profile to install/deploy a project with sources and javadocs. 
        usage: mvn -Pgenerate-sources-and-javadocs deploy -->
        <profile>
            <id>generate-sources-and-javadocs</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                    </plugin>
                    <!-- Javadoc Plugin -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <scm>
        <connection>scm:ssh:git@github.com:ogema/ogema-launcher.git</connection>
        <developerConnection>scm:git:ssh:git@github.com:ogema/ogema-launcher.git</developerConnection>
		<url>scm:ssh:git@github.com:ogema/ogema-launcher.git</url>
	 	<tag>ogema-launcher-1.3.0</tag>
    </scm>

</project>
